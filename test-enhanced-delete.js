const axios = require('axios');

async function testEnhancedDelete() {
  try {
    console.log('üöÄ Testando exclus√£o de usu√°rios melhorada...\n');
    
    // Passo 1: Login como admin
    console.log('üìã Passo 1: Fazendo login como admin...');
    const loginResponse = await axios.post('http://localhost:3001/api/auth/login', {
      email: 'admin@surestake.com',
      password: 'admin123'
    });
    
    const token = loginResponse.data.token;
    console.log('‚úÖ Login bem-sucedido');
    
    // Passo 2: Listar usu√°rios
    console.log('\nüìã Passo 2: Listando usu√°rios...');
    const usersResponse = await axios.get('http://localhost:3001/api/users', {
      headers: { 'Authorization': `Bearer ${token}` }
    });
    
    const users = usersResponse.data.users;
    console.log(`‚úÖ ${users.length} usu√°rios encontrados`);
    
    // Encontrar usu√°rio para deletar (n√£o admin)
    const userToDelete = users.find(u => !u.is_admin);
    
    if (!userToDelete) {
      console.log('‚ö†Ô∏è Nenhum usu√°rio n√£o-admin encontrado para deletar');
      return;
    }
    
    console.log(`\nüìã Usu√°rio selecionado para exclus√£o:`);
    console.log(`   - ID: ${userToDelete.id}`);
    console.log(`   - Username: ${userToDelete.username}`);
    console.log(`   - Email: ${userToDelete.email}`);
    
    // Passo 3: Tentar deletar com valida√ß√£o de ID inv√°lido
    console.log('\nüìã Passo 3: Testando valida√ß√£o de ID inv√°lido...');
    try {
      await axios.delete('http://localhost:3001/api/users/invalid', {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      console.log('‚ùå Valida√ß√£o de ID falhou (deveria ter retornado erro)');
    } catch (error) {
      if (error.response?.status === 400) {
        console.log('‚úÖ Valida√ß√£o de ID funcionando:', error.response.data.error);
      } else {
        console.log('‚ùå Erro inesperado na valida√ß√£o:', error.response?.status);
      }
    }
    
    // Passo 4: Tentar deletar usu√°rio inexistente
    console.log('\nüìã Passo 4: Testando exclus√£o de usu√°rio inexistente...');
    try {
      await axios.delete('http://localhost:3001/api/users/99999', {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      console.log('‚ùå Valida√ß√£o de usu√°rio inexistente falhou');
    } catch (error) {
      if (error.response?.status === 404) {
        console.log('‚úÖ Valida√ß√£o de usu√°rio inexistente funcionando:', error.response.data.error);
      } else {
        console.log('‚ùå Erro inesperado na valida√ß√£o:', error.response?.status);
      }
    }
    
    // Passo 5: Deletar usu√°rio v√°lido
    console.log('\nüìã Passo 5: Deletando usu√°rio v√°lido...');
    try {
      const deleteResponse = await axios.delete(`http://localhost:3001/api/users/${userToDelete.id}`, {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      
      console.log('‚úÖ Exclus√£o bem-sucedida:');
      console.log('   - Status:', deleteResponse.status);
      console.log('   - Mensagem:', deleteResponse.data.message);
      console.log('   - Detalhes:', JSON.stringify(deleteResponse.data.details, null, 2));
      
    } catch (error) {
      console.log('‚ùå Erro na exclus√£o:', error.response?.status, error.response?.data);
      return;
    }
    
    // Passo 6: Verificar se foi realmente deletado
    console.log('\nüìã Passo 6: Verificando exclus√£o...');
    try {
      await axios.get(`http://localhost:3001/api/users/${userToDelete.id}`, {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      console.log('‚ùå Usu√°rio ainda existe ap√≥s exclus√£o');
    } catch (error) {
      if (error.response?.status === 404) {
        console.log('‚úÖ Usu√°rio foi deletado com sucesso (n√£o encontrado)');
      } else {
        console.log('‚ùå Erro ao verificar exclus√£o:', error.response?.status);
      }
    }
    
    // Passo 7: Listar usu√°rios para confirmar
    console.log('\nüìã Passo 7: Listando usu√°rios ap√≥s exclus√£o...');
    const usersAfterResponse = await axios.get('http://localhost:3001/api/users', {
      headers: { 'Authorization': `Bearer ${token}` }
    });
    
    const usersAfter = usersAfterResponse.data.users;
    console.log(`‚úÖ ${usersAfter.length} usu√°rios ap√≥s exclus√£o`);
    
    const deletedUser = usersAfter.find(u => u.id === userToDelete.id);
    if (deletedUser) {
      console.log('‚ùå Usu√°rio ainda aparece na lista ap√≥s exclus√£o');
    } else {
      console.log('‚úÖ Usu√°rio n√£o aparece mais na lista (exclus√£o bem-sucedida)');
    }
    
    console.log('\nüéâ Teste de exclus√£o melhorada conclu√≠do com sucesso!');
    
  } catch (error) {
    console.error('\n‚ùå Erro geral no teste:', error.message);
    
    if (error.response) {
      console.error('   - Status:', error.response.status);
      console.error('   - Dados:', JSON.stringify(error.response.data, null, 2));
    }
  }
}

testEnhancedDelete();
