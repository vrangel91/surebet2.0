const fetch = require('node-fetch');

async function testRankingComplete() {
  try {
    console.log('üß™ TESTE COMPLETO DO RANKING CORRIGIDO');
    console.log('========================================');
    
    // 1. Testar dados v√°lidos
    console.log('\n1Ô∏è‚É£ Testando com dados v√°lidos...');
    
    const validData = [
      {
        surebet_id: 'test_valid_1',
        house: 'Bet365',
        market: 'Resultado Final',
        match: 'Flamengo vs Palmeiras',
        profit: 15.50,
        date: '2025-08-29',
        hour: 20,
        sport: 'Football',
        period: '90min',
        minutes: 90,
        anchorh1: 'Flamengo',
        anchorh2: 'Palmeiras',
        chance: 95.5,
        metadata: { source: 'ranking_view', test: true }
      }
    ];
    
    // Testar inser√ß√£o individual
    console.log('\nüìù Testando inser√ß√£o individual...');
    try {
      const individualResponse = await fetch('http://localhost:3001/api/surebet-stats', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer test_token'
        },
        body: JSON.stringify(validData[0])
      });
      
      console.log(`üìä Status individual: ${individualResponse.status} ${individualResponse.statusText}`);
      
      if (individualResponse.ok) {
        const result = await individualResponse.json();
        console.log('‚úÖ Inser√ß√£o individual bem-sucedida:', result);
      } else {
        const errorText = await individualResponse.text();
        console.log('‚ùå Erro individual:', errorText);
      }
    } catch (error) {
      console.error('‚ùå Erro na inser√ß√£o individual:', error.message);
    }
    
    // Testar inser√ß√£o em lote
    console.log('\nüìù Testando inser√ß√£o em lote...');
    try {
      const bulkResponse = await fetch('http://localhost:3001/api/surebet-stats/bulk', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer test_token'
        },
        body: JSON.stringify({ stats: validData })
      });
      
      console.log(`üìä Status bulk: ${bulkResponse.status} ${bulkResponse.statusText}`);
      
      if (bulkResponse.ok) {
        const result = await bulkResponse.json();
        console.log('‚úÖ Inser√ß√£o em lote bem-sucedida:', result);
      } else {
        const errorText = await bulkResponse.text();
        console.log('‚ùå Erro bulk:', errorText);
      }
    } catch (error) {
      console.error('‚ùå Erro na inser√ß√£o em lote:', error.message);
    }
    
    // 2. Testar dados inv√°lidos (campos faltando)
    console.log('\n2Ô∏è‚É£ Testando com dados inv√°lidos (campos faltando)...');
    
    const invalidData = [
      {
        surebet_id: 'test_invalid_1',
        house: 'Bet365',
        // market faltando
        match: 'Flamengo vs Palmeiras',
        profit: 15.50,
        date: '2025-08-29',
        hour: 20,
        sport: 'Football'
        // outros campos opcionais
      }
    ];
    
    try {
      const invalidResponse = await fetch('http://localhost:3001/api/surebet-stats/bulk', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer test_token'
        },
        body: JSON.stringify({ stats: invalidData })
      });
      
      console.log(`üìä Status dados inv√°lidos: ${invalidResponse.status} ${invalidResponse.statusText}`);
      
      if (invalidResponse.ok) {
        console.log('‚ö†Ô∏è Dados inv√°lidos foram aceitos (n√£o esperado)');
      } else {
        const errorText = await invalidResponse.text();
        console.log('‚úÖ Erro esperado para dados inv√°lidos:', errorText);
      }
    } catch (error) {
      console.error('‚ùå Erro ao testar dados inv√°lidos:', error.message);
    }
    
    // 3. Testar dados com valores undefined/null
    console.log('\n3Ô∏è‚É£ Testando com valores undefined/null...');
    
    const nullData = [
      {
        surebet_id: 'test_null_1',
        house: null, // valor null
        market: 'Resultado Final',
        match: 'Flamengo vs Palmeiras',
        profit: 15.50,
        date: '2025-08-29',
        hour: 20,
        sport: 'Football'
      }
    ];
    
    try {
      const nullResponse = await fetch('http://localhost:3001/api/surebet-stats/bulk', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer test_token'
        },
        body: JSON.stringify({ stats: nullData })
      });
      
      console.log(`üìä Status valores null: ${nullResponse.status} ${nullResponse.statusText}`);
      
      if (nullResponse.ok) {
        console.log('‚ö†Ô∏è Valores null foram aceitos (n√£o esperado)');
      } else {
        const errorText = await nullResponse.text();
        console.log('‚úÖ Erro esperado para valores null:', errorText);
      }
    } catch (error) {
      console.error('‚ùå Erro ao testar valores null:', error.message);
    }
    
    // 4. Testar formato de data
    console.log('\n4Ô∏è‚É£ Testando formato de data...');
    
    const dateData = [
      {
        surebet_id: 'test_date_1',
        house: 'Bet365',
        market: 'Resultado Final',
        match: 'Flamengo vs Palmeiras',
        profit: 15.50,
        date: new Date().toISOString(), // formato ISO completo
        hour: 20,
        sport: 'Football'
      }
    ];
    
    try {
      const dateResponse = await fetch('http://localhost:3001/api/surebet-stats/bulk', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer test_token'
        },
        body: JSON.stringify({ stats: dateData })
      });
      
      console.log(`üìä Status formato data: ${dateResponse.status} ${dateResponse.statusText}`);
      
      if (dateResponse.ok) {
        const result = await dateResponse.json();
        console.log('‚úÖ Formato de data aceito:', result);
      } else {
        const errorText = await dateResponse.text();
        console.log('‚ùå Erro com formato de data:', errorText);
      }
    } catch (error) {
      console.error('‚ùå Erro ao testar formato de data:', error.message);
    }
    
    console.log('\nüéâ Teste completo finalizado!');
    
  } catch (error) {
    console.error('‚ùå Erro geral:', error.message);
  }
}

testRankingComplete();
