const { sequelize } = require('../config/database');
const { User, UserVIP } = require('../models');
const VIPService = require('../utils/vipService');

async function testAccountExpiration() {
  console.log('üß™ Testando sistema de expira√ß√£o de contas...\n');

  try {
    // 1. Criar usu√°rio de teste
    console.log('1Ô∏è‚É£ Criando usu√°rio de teste...');
    const testUser = await User.create({
      username: 'test_expiration',
      first_name: 'Teste',
      last_name: 'Expira√ß√£o',
      email: 'test.expiration@example.com',
      password_hash: 'test123',
      account_type: 'basic',
      is_vip: false
    });

    console.log(`‚úÖ Usu√°rio criado: ${testUser.id} - ${testUser.username}`);

    // 2. Ativar plano PREMIUM
    console.log('\n2Ô∏è‚É£ Ativando plano PREMIUM...');
    const premiumPlan = {
      plan_id: 'premium',
      plan_name: 'Premium',
      plan_days: 30,
      order_id: 1,
      payment_method: 'pix',
      amount: 29.90,
      auto_renew: false
    };

    const premiumResult = await VIPService.activateVIP(testUser.id, premiumPlan);
    console.log(`‚úÖ Plano PREMIUM ativado: ${premiumResult.vip.planName}`);

    // 3. Verificar status atual
    console.log('\n3Ô∏è‚É£ Verificando status atual...');
    const currentStatus = await VIPService.checkVIPStatus(testUser.id);
    console.log(`üìä Status atual: ${currentStatus.hasVIP ? 'VIP Ativo' : 'Sem VIP'}`);
    console.log(`üìä Plano: ${currentStatus.vipStatus?.planName || 'B√°sico'}`);
    console.log(`üìä Expira em: ${currentStatus.vipStatus?.dataFim || 'N/A'}`);

    // 4. Simular expira√ß√£o (alterar data_fim para o passado)
    console.log('\n4Ô∏è‚É£ Simulando expira√ß√£o...');
    const expiredVIP = await UserVIP.findOne({
      where: { user_id: testUser.id, status: 'ativo' }
    });

    if (expiredVIP) {
      expiredVIP.data_fim = new Date(Date.now() - 24 * 60 * 60 * 1000); // 1 dia atr√°s
      await expiredVIP.save();
      console.log('‚úÖ Data de expira√ß√£o alterada para o passado');
    }

    // 5. Processar expira√ß√£o
    console.log('\n5Ô∏è‚É£ Processando expira√ß√£o...');
    const expirationResult = await VIPService.processExpiredVIPs();
    console.log(`‚úÖ ${expirationResult.expiredCount} planos expirados processados`);

    // 6. Verificar status ap√≥s expira√ß√£o
    console.log('\n6Ô∏è‚É£ Verificando status ap√≥s expira√ß√£o...');
    const finalStatus = await VIPService.checkVIPStatus(testUser.id);
    console.log(`üìä Status final: ${finalStatus.hasVIP ? 'VIP Ativo' : 'Sem VIP'}`);
    console.log(`üìä Plano final: ${finalStatus.vipStatus?.planName || 'B√°sico'}`);

    // 7. Verificar dados do usu√°rio
    const updatedUser = await User.findByPk(testUser.id);
    console.log(`üìä Account Type: ${updatedUser.account_type}`);
    console.log(`üìä Is VIP: ${updatedUser.is_vip}`);

    // 8. Testar com m√∫ltiplos planos
    console.log('\n7Ô∏è‚É£ Testando com m√∫ltiplos planos...');
    
    // Ativar VIP (deve sobrescrever PREMIUM)
    const vipPlan = {
      plan_id: 'vip',
      plan_name: 'VIP',
      plan_days: 15,
      order_id: 2,
      payment_method: 'pix',
      amount: 99.90,
      auto_renew: false
    };

    const vipResult = await VIPService.activateVIP(testUser.id, vipPlan);
    console.log(`‚úÖ Plano VIP ativado: ${vipResult.vip.planName}`);

    // Verificar status com m√∫ltiplos planos
    const multiStatus = await VIPService.checkVIPStatus(testUser.id);
    console.log(`üìä Status com m√∫ltiplos planos: ${multiStatus.hasVIP ? 'VIP Ativo' : 'Sem VIP'}`);
    console.log(`üìä Plano ativo: ${multiStatus.vipStatus?.planName || 'B√°sico'}`);

    // 9. Limpeza
    console.log('\n8Ô∏è‚É£ Limpando dados de teste...');
    await UserVIP.destroy({ where: { user_id: testUser.id } });
    await User.destroy({ where: { id: testUser.id } });
    console.log('‚úÖ Dados de teste removidos');

    console.log('\nüéâ Teste conclu√≠do com sucesso!');
    console.log('\nüìã Resumo do teste:');
    console.log('‚úÖ Sistema reconhece 3 n√≠veis: B√ÅSICO, PREMIUM, VIP');
    console.log('‚úÖ Expira√ß√£o funciona corretamente');
    console.log('‚úÖ Downgrade para B√ÅSICO quando n√£o h√° planos ativos');
    console.log('‚úÖ M√∫ltiplos planos s√£o gerenciados corretamente');

  } catch (error) {
    console.error('‚ùå Erro no teste:', error);
    throw error;
  } finally {
    await sequelize.close();
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  testAccountExpiration()
    .then(() => {
      console.log('\n‚úÖ Teste finalizado');
      process.exit(0);
    })
    .catch((error) => {
      console.error('\n‚ùå Teste falhou:', error);
      process.exit(1);
    });
}

module.exports = testAccountExpiration;
