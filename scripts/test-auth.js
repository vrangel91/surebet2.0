const { sequelize } = require('../config/database');
const { User, UserSession } = require('../models');
const { generateToken, verifyToken, createUserSession, verifyUserSession } = require('../utils/auth');

async function testAuth() {
  try {
    console.log('üß™ Testando sistema de autentica√ß√£o...\n');
    
    // 1. Buscar um usu√°rio existente
    console.log('1Ô∏è‚É£ Buscando usu√°rio existente...');
    const user = await User.findOne({
      where: { email: 'teste@teste.com' }
    });
    
    if (!user) {
      console.log('‚ùå Usu√°rio teste@teste.com n√£o encontrado');
      return;
    }
    
    console.log('‚úÖ Usu√°rio encontrado:', {
      id: user.id,
      email: user.email,
      is_admin: user.is_admin,
      is_vip: user.is_vip
    });
    
    // 2. Gerar token JWT
    console.log('\n2Ô∏è‚É£ Gerando token JWT...');
    const token = generateToken(user);
    console.log('‚úÖ Token gerado:', token.substring(0, 50) + '...');
    
    // 3. Verificar token JWT
    console.log('\n3Ô∏è‚É£ Verificando token JWT...');
    const decoded = verifyToken(token);
    if (decoded) {
      console.log('‚úÖ Token JWT v√°lido:', decoded);
    } else {
      console.log('‚ùå Token JWT inv√°lido');
      return;
    }
    
    // 4. Criar sess√£o no banco
    console.log('\n4Ô∏è‚É£ Criando sess√£o no banco...');
    await createUserSession(user, token);
    console.log('‚úÖ Sess√£o criada no banco');
    
    // 5. Verificar sess√£o no banco
    console.log('\n5Ô∏è‚É£ Verificando sess√£o no banco...');
    const sessionUser = await verifyUserSession(token);
    if (sessionUser) {
      console.log('‚úÖ Sess√£o v√°lida no banco:', {
        id: sessionUser.id,
        email: sessionUser.email
      });
    } else {
      console.log('‚ùå Sess√£o inv√°lida no banco');
    }
    
    // 6. Simular requisi√ß√£o HTTP
    console.log('\n6Ô∏è‚É£ Simulando requisi√ß√£o HTTP...');
    const mockReq = {
      headers: {
        'authorization': `Bearer ${token}`
      }
    };
    
    const tokenFromHeader = mockReq.headers['authorization']?.split(' ')[1];
    console.log('üîë Token extra√≠do do header:', tokenFromHeader ? 'Sim' : 'N√£o');
    
    if (tokenFromHeader) {
      const decodedFromHeader = verifyToken(tokenFromHeader);
      if (decodedFromHeader) {
        console.log('‚úÖ Token do header √© v√°lido');
        
        const userFromSession = await verifyUserSession(tokenFromHeader);
        if (userFromSession) {
          console.log('‚úÖ Usu√°rio encontrado na sess√£o');
        } else {
          console.log('‚ùå Usu√°rio n√£o encontrado na sess√£o');
        }
      } else {
        console.log('‚ùå Token do header √© inv√°lido');
      }
    }
    
    console.log('\nüéâ Teste de autentica√ß√£o conclu√≠do!');
    
  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error);
  } finally {
    await sequelize.close();
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  testAuth();
}

module.exports = { testAuth };
