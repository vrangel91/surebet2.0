import store from '../store'

export function requireAuth(to, from, next) {
  // Verifica se o usu√°rio est√° autenticado
  if (store.getters.isAuthenticated) {
    console.log('‚úÖ Acesso autorizado para:', store.getters.currentUser?.email, 'Rota:', to.path)
    next()
  } else {
    // Log de tentativa de acesso n√£o autorizado
    console.warn('üö´ Tentativa de acesso n√£o autorizado para rota:', to.path, 'Redirecionando para login')
    
    // Salva a rota que o usu√°rio tentou acessar para redirecionar ap√≥s login
    if (to.path !== '/login') {
      localStorage.setItem('redirectAfterLogin', to.fullPath)
    }
    
    // Redireciona para login se n√£o estiver autenticado
    next('/login')
  }
}

export function requireGuest(to, from, next) {
  // Verifica se o usu√°rio N√ÉO est√° autenticado (para p√°ginas como login)
  if (!store.getters.isAuthenticated) {
    console.log('‚úÖ Acesso √† p√°gina de login autorizado para usu√°rio n√£o autenticado')
    next()
  } else {
    console.log('üîÑ Usu√°rio j√° autenticado, redirecionando...')
    
    // Redireciona baseado no tipo de conta se j√° estiver autenticado
    if (store.getters.isVIP) {
      next('/')
    } else {
      next('/plans')
    }
  }
}

export function checkAuthStatus() {
  // Verifica o status de autentica√ß√£o ao carregar a aplica√ß√£o
  console.log('üîç Verificando status de autentica√ß√£o...')
  store.dispatch('checkAuth')
}

export function requireAdmin(to, from, next) {
  // Verifica se o usu√°rio est√° autenticado e √© admin
  if (store.getters.isAuthenticated && store.getters.isAdmin) {
    console.log('‚úÖ Acesso administrativo autorizado para:', store.getters.currentUser?.email, 'Rota:', to.path)
    next()
  } else {
    // Log de tentativa de acesso n√£o autorizado
    if (store.getters.isAuthenticated) {
      console.warn('üö´ Tentativa de acesso administrativo negada para usu√°rio:', store.getters.currentUser?.email, 'Rota:', to.path)
    } else {
      console.warn('üö´ Tentativa de acesso administrativo sem autentica√ß√£o para rota:', to.path)
    }
    
    // Salva a rota que o usu√°rio tentou acessar para redirecionar ap√≥s upgrade
    if (to.path !== '/plans' && to.path !== '/') {
      localStorage.setItem('redirectAfterUpgrade', to.fullPath)
    }
    
    // Redireciona baseado no tipo de conta se n√£o for admin
    if (store.getters.isVIP) {
      next('/')
    } else {
      next('/plans')
    }
  }
}

export function requireVIP(to, from, next) {
  // Verifica se o usu√°rio est√° autenticado e tem n√≠vel VIP ou Premium
  if (store.getters.isAuthenticated && store.getters.isVIP) {
    console.log('‚úÖ Acesso VIP autorizado para:', store.getters.currentUser?.email, 'Rota:', to.path)
    next()
  } else {
    // Log de tentativa de acesso n√£o autorizado
    if (store.getters.isAuthenticated) {
      console.warn('üö´ Tentativa de acesso VIP negada para usu√°rio:', store.getters.currentUser?.email, 'N√≠vel:', store.getters.currentUser?.accountType, 'Rota:', to.path)
    } else {
      console.warn('üö´ Tentativa de acesso VIP sem autentica√ß√£o para rota:', to.path)
    }
    
    // Salva a rota que o usu√°rio tentou acessar para redirecionar ap√≥s upgrade
    if (to.path !== '/plans') {
      localStorage.setItem('redirectAfterUpgrade', to.fullPath)
    }
    
    // Redireciona para planos se n√£o for VIP
    next('/plans')
  }
}
