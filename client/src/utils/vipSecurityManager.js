/**
 * üîí Sistema de Seguran√ßa VIP - SureStake
 * 
 * Este sistema garante que:
 * - VIP sempre √© validado online quando poss√≠vel
 * - Cache offline √© usado apenas temporariamente
 * - Preven√ß√£o de fraudes com valida√ß√£o de integridade
 * - Expira√ß√£o autom√°tica para evitar abusos
 */

import { ref, computed } from 'vue';
import api from '@/utils/axios';

class VIPSecurityManager {
  constructor() {
    this.vipStatus = ref(null);
    this.vipExpiration = ref(null);
    this.lastOnlineValidation = ref(null);
    this.offlineExpiration = ref(null);
    this.isOnline = ref(navigator.onLine);
    this.validationInterval = null;
    this.forceSyncTimeout = null;
    
    // Configura√ß√µes de seguran√ßa
    this.SECURITY_CONFIG = {
      // Tempo m√°ximo offline antes de for√ßar sincroniza√ß√£o (2 horas)
      MAX_OFFLINE_TIME: 2 * 60 * 60 * 1000,
      
      // Tempo m√°ximo para usar cache offline (24 horas)
      MAX_CACHE_TIME: 24 * 60 * 60 * 1000,
      
      // Intervalo para verificar status online (5 minutos)
      ONLINE_CHECK_INTERVAL: 5 * 60 * 1000,
      
      // Tempo para for√ßar sincroniza√ß√£o ap√≥s voltar online (30 segundos)
      FORCE_SYNC_DELAY: 30 * 1000
    };
    
    this.setupEventListeners();
  }

  // üîç Verificar se o usu√°rio tem acesso VIP v√°lido
  async checkVIPAccess() {
    console.log('üîí [VIP Security] Verificando acesso VIP...');
    
    try {
      // 1. Tentar valida√ß√£o online primeiro
      if (this.isOnline.value) {
        console.log('üîí [VIP Security] Online - validando no servidor...');
        const onlineStatus = await this.validateVIPOnline();
        
        if (onlineStatus.isValid) {
          console.log('‚úÖ [VIP Security] VIP v√°lido online');
          return { access: true, source: 'online', data: onlineStatus };
        } else {
          console.log('‚ùå [VIP Security] VIP inv√°lido online');
          this.clearVIPCache();
          return { access: false, source: 'online', reason: 'VIP expirado/removido' };
        }
      }
      
      // 2. Se offline, verificar cache com valida√ß√£o de seguran√ßa
      console.log('üîí [VIP Security] Offline - verificando cache...');
      const offlineStatus = this.validateVIPOffline();
      
      if (offlineStatus.isValid) {
        console.log('‚úÖ [VIP Security] VIP v√°lido offline (cache)');
        return { access: true, source: 'offline', data: offlineStatus };
      } else {
        console.log('‚ùå [VIP Security] VIP inv√°lido offline');
        return { access: false, source: 'offline', reason: offlineStatus.reason };
      }
      
    } catch (error) {
      console.error('‚ùå [VIP Security] Erro ao verificar VIP:', error);
      return { access: false, source: 'error', reason: 'Erro de valida√ß√£o' };
    }
  }

  // üåê Valida√ß√£o online obrigat√≥ria
  async validateVIPOnline() {
    try {
      console.log('üåê [VIP Security] Validando VIP no servidor...');
      
      const response = await api.get('/api/vip/my-status', {
        timeout: 10000 // 10 segundos timeout
      });
      
      const vipData = response.data;
      
      // Validar dados recebidos
      if (!vipData || typeof vipData.hasVIP !== 'boolean') {
        throw new Error('Resposta inv√°lida do servidor');
      }
      
      // Extrair dados da resposta da API
      const isVIP = vipData.hasVIP;
      const expiration = vipData.vipStatus?.dataFim || null;
      
      // Salvar dados validados localmente
      this.saveVIPData({
        isVIP: isVIP,
        expiration: expiration,
        lastValidation: Date.now(),
        source: 'online'
      });
      
      // Atualizar status
      this.vipStatus.value = isVIP;
      this.vipExpiration.value = expiration;
      this.lastOnlineValidation.value = Date.now();
      
      // Configurar expira√ß√£o offline
      this.setupOfflineExpiration();
      
      console.log('‚úÖ [VIP Security] VIP validado online:', vipData);
      
      return {
        isValid: isVIP,
        expiration: expiration,
        lastValidation: Date.now()
      };
      
    } catch (error) {
      console.error('‚ùå [VIP Security] Erro na valida√ß√£o online:', error);
      
      // Se falhar online, tentar usar cache offline como fallback
      const offlineStatus = this.validateVIPOffline();
      
      if (offlineStatus.isValid) {
        console.log('‚ö†Ô∏è [VIP Security] Usando cache offline como fallback');
        return offlineStatus;
      }
      
      throw error;
    }
  }

  // üíæ Valida√ß√£o offline com seguran√ßa
  validateVIPOffline() {
    try {
      console.log('üíæ [VIP Security] Validando cache offline...');
      
      // Carregar dados do cache
      const cachedData = this.loadVIPData();
      
      if (!cachedData) {
        return { isValid: false, reason: 'Cache n√£o encontrado' };
      }
      
      // Validar integridade dos dados
      if (!this.validateDataIntegrity(cachedData)) {
        console.log('‚ùå [VIP Security] Dados corrompidos no cache');
        this.clearVIPCache();
        return { isValid: false, reason: 'Dados corrompidos' };
      }
      
      // Verificar se o cache n√£o expirou
      if (this.isCacheExpired(cachedData)) {
        console.log('‚ùå [VIP Security] Cache expirado');
        this.clearVIPCache();
        return { isValid: false, reason: 'Cache expirado' };
      }
      
      // Verificar se o VIP n√£o expirou
      if (this.isVIPExpired(cachedData.expiration)) {
        console.log('‚ùå [VIP Security] VIP expirado');
        this.clearVIPCache();
        return { isValid: false, reason: 'VIP expirado' };
      }
      
      // Verificar tempo offline m√°ximo
      if (this.isOfflineTimeExceeded(cachedData.lastValidation)) {
        console.log('‚ùå [VIP Security] Tempo offline excedido');
        this.clearVIPCache();
        return { isValid: false, reason: 'Tempo offline excedido' };
      }
      
      console.log('‚úÖ [VIP Security] Cache offline v√°lido');
      
      return {
        isValid: cachedData.isVIP,
        expiration: cachedData.expiration,
        lastValidation: cachedData.lastValidation,
        source: 'offline'
      };
      
    } catch (error) {
      console.error('‚ùå [VIP Security] Erro na valida√ß√£o offline:', error);
      return { isValid: false, reason: 'Erro na valida√ß√£o offline' };
    }
  }

  // üîê Validar integridade dos dados
  validateDataIntegrity(data) {
    try {
      // Verificar se todos os campos obrigat√≥rios existem
      const requiredFields = ['isVIP', 'expiration', 'lastValidation', 'source'];
      const hasAllFields = requiredFields.every(field => data.hasOwnProperty(field));
      
      if (!hasAllFields) {
        console.log('‚ùå [VIP Security] Campos obrigat√≥rios ausentes');
        return false;
      }
      
      // Verificar tipos dos dados
      if (typeof data.isVIP !== 'boolean') {
        console.log('‚ùå [VIP Security] Tipo inv√°lido para isVIP');
        return false;
      }
      
      if (typeof data.expiration !== 'string' || isNaN(Date.parse(data.expiration))) {
        console.log('‚ùå [VIP Security] Data de expira√ß√£o inv√°lida');
        return false;
      }
      
      if (typeof data.lastValidation !== 'number' || data.lastValidation <= 0) {
        console.log('‚ùå [VIP Security] Timestamp de valida√ß√£o inv√°lido');
        return false;
      }
      
      // Verificar se a data de expira√ß√£o n√£o √© no passado
      if (new Date(data.expiration) <= new Date()) {
        console.log('‚ùå [VIP Security] VIP j√° expirou');
        return false;
      }
      
      return true;
      
    } catch (error) {
      console.error('‚ùå [VIP Security] Erro na valida√ß√£o de integridade:', error);
      return false;
    }
  }

  // ‚è∞ Verificar se o cache expirou
  isCacheExpired(data) {
    const now = Date.now();
    const cacheAge = now - data.lastValidation;
    const maxCacheTime = this.SECURITY_CONFIG.MAX_CACHE_TIME;
    
    if (cacheAge > maxCacheTime) {
      console.log(`‚ùå [VIP Security] Cache expirado: ${cacheAge}ms > ${maxCacheTime}ms`);
      return true;
    }
    
    return false;
  }

  // üìÖ Verificar se o VIP expirou
  isVIPExpired(expirationDate) {
    const now = new Date();
    const expiration = new Date(expirationDate);
    
    if (expiration <= now) {
      console.log('‚ùå [VIP Security] VIP expirou:', expiration, '<=', now);
      return true;
    }
    
    return false;
  }

  // ‚è±Ô∏è Verificar se o tempo offline foi excedido
  isOfflineTimeExceeded(lastValidation) {
    const now = Date.now();
    const offlineTime = now - lastValidation;
    const maxOfflineTime = this.SECURITY_CONFIG.MAX_OFFLINE_TIME;
    
    if (offlineTime > maxOfflineTime) {
      console.log(`‚ùå [VIP Security] Tempo offline excedido: ${offlineTime}ms > ${maxOfflineTime}ms`);
      return true;
    }
    
    return false;
  }

  // üíæ Salvar dados VIP com timestamp
  saveVIPData(data) {
    try {
      const vipData = {
        ...data,
        timestamp: Date.now(),
        checksum: this.generateChecksum(data)
      };
      
      localStorage.setItem('vip_security_data', JSON.stringify(vipData));
      console.log('üíæ [VIP Security] Dados VIP salvos no cache');
      
    } catch (error) {
      console.error('‚ùå [VIP Security] Erro ao salvar dados VIP:', error);
    }
  }

  // üìñ Carregar dados VIP do cache
  loadVIPData() {
    try {
      const cachedData = localStorage.getItem('vip_security_data');
      
      if (!cachedData) {
        return null;
      }
      
      const data = JSON.parse(cachedData);
      
      // Verificar checksum para integridade
      if (data.checksum !== this.generateChecksum(data)) {
        console.log('‚ùå [VIP Security] Checksum inv√°lido - dados corrompidos');
        this.clearVIPCache();
        return null;
      }
      
      return data;
      
    } catch (error) {
      console.error('‚ùå [VIP Security] Erro ao carregar dados VIP:', error);
      this.clearVIPCache();
      return null;
    }
  }

  // üóëÔ∏è Limpar cache VIP
  clearVIPCache() {
    try {
      localStorage.removeItem('vip_security_data');
      this.vipStatus.value = null;
      this.vipExpiration.value = null;
      this.lastOnlineValidation.value = null;
      this.offlineExpiration.value = null;
      
      console.log('üóëÔ∏è [VIP Security] Cache VIP limpo');
      
    } catch (error) {
      console.error('‚ùå [VIP Security] Erro ao limpar cache:', error);
    }
  }

  // üîê Gerar checksum para integridade
  generateChecksum(data) {
    try {
      const dataString = JSON.stringify({
        isVIP: data.isVIP,
        expiration: data.expiration,
        lastValidation: data.lastValidation,
        source: data.source
      });
      
      // Checksum simples baseado em hash da string
      let hash = 0;
      for (let i = 0; i < dataString.length; i++) {
        const char = dataString.charCodeAt(i);
        hash = ((hash << 5) - hash) + char;
        hash = hash & hash; // Convert to 32bit integer
      }
      
      return hash.toString(36);
      
    } catch (error) {
      console.error('‚ùå [VIP Security] Erro ao gerar checksum:', error);
      return '';
    }
  }

  // ‚è∞ Configurar expira√ß√£o offline
  setupOfflineExpiration() {
    const now = Date.now();
    const maxOfflineTime = this.SECURITY_CONFIG.MAX_OFFLINE_TIME;
    
    this.offlineExpiration.value = now + maxOfflineTime;
    
    console.log(`‚è∞ [VIP Security] Expira√ß√£o offline configurada: ${new Date(this.offlineExpiration.value)}`);
  }

  // üîÑ Configurar verifica√ß√£o peri√≥dica online
  setupPeriodicValidation() {
    if (this.validationInterval) {
      clearInterval(this.validationInterval);
    }
    
    this.validationInterval = setInterval(async () => {
      if (this.isOnline.value) {
        console.log('üîÑ [VIP Security] Verifica√ß√£o peri√≥dica online...');
        try {
          await this.validateVIPOnline();
        } catch (error) {
          console.error('‚ùå [VIP Security] Erro na verifica√ß√£o peri√≥dica:', error);
        }
      }
    }, this.SECURITY_CONFIG.ONLINE_CHECK_INTERVAL);
    
    console.log('üîÑ [VIP Security] Verifica√ß√£o peri√≥dica configurada');
  }

  // üåê For√ßar sincroniza√ß√£o quando voltar online
  async forceSyncWhenOnline() {
    if (this.forceSyncTimeout) {
      clearTimeout(this.forceSyncTimeout);
    }
    
    this.forceSyncTimeout = setTimeout(async () => {
      if (this.isOnline.value) {
        console.log('üîÑ [VIP Security] For√ßando sincroniza√ß√£o online...');
        try {
          await this.validateVIPOnline();
        } catch (error) {
          console.error('‚ùå [VIP Security] Erro na sincroniza√ß√£o for√ßada:', error);
        }
      }
    }, this.SECURITY_CONFIG.FORCE_SYNC_DELAY);
  }

  // üì° Configurar listeners de eventos
  setupEventListeners() {
    // Monitorar mudan√ßas de conectividade
    window.addEventListener('online', () => {
      console.log('üåê [VIP Security] Conex√£o restaurada');
      this.isOnline.value = true;
      this.forceSyncWhenOnline();
    });
    
    window.addEventListener('offline', () => {
      console.log('üì¥ [VIP Security] Conex√£o perdida');
      this.isOnline.value = false;
    });
    
    // Verificar conectividade inicial
    this.isOnline.value = navigator.onLine;
    
    // Configurar verifica√ß√£o peri√≥dica
    this.setupPeriodicValidation();
  }

  // üßπ Cleanup
  destroy() {
    if (this.validationInterval) {
      clearInterval(this.validationInterval);
    }
    
    if (this.forceSyncTimeout) {
      clearTimeout(this.forceSyncTimeout);
    }
    
    console.log('üßπ [VIP Security] Manager destru√≠do');
  }

  // üìä Status atual do sistema
  getStatus() {
    return {
      vipStatus: this.vipStatus.value,
      vipExpiration: this.vipExpiration.value,
      lastOnlineValidation: this.lastOnlineValidation.value,
      offlineExpiration: this.offlineExpiration.value,
      isOnline: this.isOnline.value,
      cacheValid: this.validateVIPOffline().isValid
    };
  }
}

// Inst√¢ncia singleton
const vipSecurityManager = new VIPSecurityManager();

export default vipSecurityManager;
