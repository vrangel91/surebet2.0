// Utilit√°rio para atualiza√ß√£o autom√°tica do PWA
export class PWAAutoRefresh {
  constructor() {
    this.isRefreshing = false;
    this.init();
  }

  init() {
    // Escuta mensagens do Service Worker
    if ('serviceWorker' in navigator) {
      navigator.serviceWorker.addEventListener('message', (event) => {
        if (event.data && event.data.type === 'FORCE_REFRESH') {
          console.log('üîÑ [PWA] Recebida mensagem de atualiza√ß√£o:', event.data);
          this.forceRefresh();
        }
      });

      // Verifica se h√° uma nova vers√£o dispon√≠vel
      navigator.serviceWorker.addEventListener('controllerchange', () => {
        console.log('üîÑ [PWA] Service Worker atualizado, for√ßando refresh...');
        this.forceRefresh();
      });

      // For√ßa atualiza√ß√£o quando a p√°gina ganha foco (usu√°rio volta para a aba)
      window.addEventListener('focus', () => {
        console.log('üîÑ [PWA] P√°gina ganhou foco, verificando atualiza√ß√µes...');
        this.checkForUpdates();
      });

      // For√ßa atualiza√ß√£o quando a p√°gina √© carregada
      window.addEventListener('load', () => {
        console.log('üîÑ [PWA] P√°gina carregada, verificando atualiza√ß√µes...');
        this.checkForUpdates();
      });
    }
  }

  async checkForUpdates() {
    if ('serviceWorker' in navigator && !this.isRefreshing) {
      try {
        const registration = await navigator.serviceWorker.getRegistration();
        if (registration) {
          // For√ßa verifica√ß√£o de atualiza√ß√µes
          await registration.update();
          console.log('üîÑ [PWA] Verifica√ß√£o de atualiza√ß√µes conclu√≠da');
        }
      } catch (error) {
        console.error('‚ùå [PWA] Erro ao verificar atualiza√ß√µes:', error);
      }
    }
  }

  forceRefresh() {
    if (this.isRefreshing) {
      console.log('üîÑ [PWA] Atualiza√ß√£o j√° em andamento, ignorando...');
      return;
    }

    this.isRefreshing = true;
    console.log('üîÑ [PWA] For√ßando atualiza√ß√£o completa da p√°gina...');

    // Limpa todos os caches
    if ('caches' in window) {
      caches.keys().then((cacheNames) => {
        return Promise.all(
          cacheNames.map((cacheName) => {
            console.log('üóëÔ∏è [PWA] Limpando cache:', cacheName);
            return caches.delete(cacheName);
          })
        );
      }).then(() => {
        console.log('üóëÔ∏è [PWA] Todos os caches foram limpos');
        this.performRefresh();
      }).catch((error) => {
        console.error('‚ùå [PWA] Erro ao limpar caches:', error);
        this.performRefresh();
      });
    } else {
      this.performRefresh();
    }
  }

  performRefresh() {
    // For√ßa um refresh completo (equivalente ao Ctrl+F5)
    console.log('üîÑ [PWA] Executando refresh completo...');
    
    // Adiciona timestamp para evitar cache do navegador
    const url = new URL(window.location);
    url.searchParams.set('_refresh', Date.now().toString());
    
    // Recarrega a p√°gina com cache bypass
    window.location.href = url.toString();
  }

  // M√©todo para for√ßar atualiza√ß√£o manual
  static forceUpdate() {
    const instance = new PWAAutoRefresh();
    instance.forceRefresh();
  }
}

// Inicializa automaticamente quando o m√≥dulo √© importado
export const pwaAutoRefresh = new PWAAutoRefresh();
