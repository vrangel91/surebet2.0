const express = require('express');
const bcrypt = require('bcryptjs');
const { User } = require('./models');

// Simular a rota de login para testar
async function testLoginRoute() {
  try {
    console.log('üîç Testando rota de login...\n');
    
    // Simular dados de requisi√ß√£o
    const req = {
      body: {
        email: 'admin@surestake.com',
        password: 'admin123'
      }
    };
    
    console.log('üì§ Dados de entrada:', JSON.stringify(req.body, null, 2));
    
    // Valida√ß√µes b√°sicas
    const { email, password } = req.body;
    if (!email || !password) {
      throw new Error('E-mail e senha s√£o obrigat√≥rios');
    }
    
    console.log('‚úÖ Valida√ß√µes b√°sicas passaram');
    
    // Buscar usu√°rio
    console.log('üîç Buscando usu√°rio no banco...');
    const user = await User.findOne({
      where: { email: email.toLowerCase() },
      attributes: ['id', 'username', 'first_name', 'last_name', 'email', 'password_hash', 'is_admin', 'is_vip', 'created_at']
    });
    
    if (!user) {
      throw new Error('Usu√°rio n√£o encontrado');
    }
    
    console.log('‚úÖ Usu√°rio encontrado:', user.email);
    console.log('   - ID:', user.id);
    console.log('   - Is Admin:', user.is_admin);
    console.log('   - Is VIP:', user.is_vip);
    
    // Verificar senha
    console.log('üîç Verificando senha...');
    const isValidPassword = await bcrypt.compare(password, user.password_hash);
    if (!isValidPassword) {
      throw new Error('Senha incorreta');
    }
    
    console.log('‚úÖ Senha v√°lida');
    
    // Verificar privil√©gios
    if (!user.is_admin && !user.is_vip) {
      throw new Error('Usu√°rio sem privil√©gios');
    }
    
    console.log('‚úÖ Privil√©gios verificados');
    
    console.log('\nüéâ Teste da rota de login passou com sucesso!');
    
  } catch (error) {
    console.error('\n‚ùå Erro no teste:', error.message);
    console.error('Stack:', error.stack);
  }
}

testLoginRoute();
